#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May 29 12:18:32 2019

@author: wangshanmin
"""
#
import sys
sys.path.append('../deploy')
import wx
import cv2
import argparse
import retinaface_model
from utils import load_image
import random
import numpy as np
import threading
import _thread
import os
from PIL import Image, ImageDraw, ImageFont
import sklearn
from wx.lib.pubsub import pub
import time
import queue
from numba import jit

class interface(wx.Frame):
    def __init__(self,parent, id):
        wx.Frame.__init__(self,parent = None, id = -1, title = '人脸识别系统',size = (1280, 960))
        self.interface_img = 'interface.jpeg'
        self.path = 'register_img/'
        self.initpos = 200
        self.minpane = 400
        self.interface_size = (600, 480)
        self.themeColor = '#0a74f7'
        self.interface_pos = (90,100)
        self.id_file = 'id_file.txt'
        self.id_embedding = 'id_embedding.txt'
        self.colour = (148, 175, 255)
        self.target_num = 3
        self.InitUI()

    def InitUI(self):
        self.window_split_left = wx.SplitterWindow(self)

        #将一个window_split_left 切割成两个panel: self.left 和 self.middle
        self.left = wx.Panel(parent=self.window_split_left, style=wx.SUNKEN_BORDER)
        self.left.SetBackgroundColour(self.colour)
        self.middle = wx.Panel(parent=self.window_split_left, style=wx.SUNKEN_BORDER)
        self.middle.SetBackgroundColour(self.colour)

        self.window_split_left.SplitVertically(self.left, self.middle)  ###初始位置

        self.window_split_left.SetSashGravity(0.2)

        ###将window_split_right 分割成两个panel,self.right和self.middle_right
        self.window_split_right = wx.SplitterWindow(self)

        ##middle panel 再切割成middle_right 和
        self.right = wx.Panel(parent=self.window_split_right, style=wx.SUNKEN_BORDER)

        self.middle_right = wx.Panel(parent=self.window_split_right, style=wx.SUNKEN_BORDER)
        self.middle_right.SetBackgroundColour(self.colour)

        self.window_split_right.SplitVertically(self.middle_right, self.right)  ###初始位置
        self.window_split_right.SetSashGravity(1)
        ###self.right
        self.window_split_right.Unsplit(self.right)
        ###剩下的三个窗口水平排列
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer.Add(self.window_split_left, 3, flag=wx.EXPAND)  # 自动缩放
        sizer.Add(self.window_split_right, 1, flag=wx.EXPAND)  # 自动缩放
        self.SetSizer(sizer)

        self.set_button()


    def set_button(self):

        # 打开界面显示封面图像

        image = cv2.imread(self.interface_img)
        image = cv2.resize(image, self.interface_size)
        cv2.imwrite(self.interface_img, image)
        interface_img = wx.Image(load_image(self.interface_img), wx.BITMAP_TYPE_ANY).ConvertToBitmap()
        self.interface_button = wx.BitmapButton(self.middle, -1, interface_img, pos=self.interface_pos,
                                                size=self.interface_size)

        ###注册按钮
        self.register_Button = wx.Button(self.left, -1, u'注册', pos=(40, 50), size=(100, 40))
        self.register_Button.SetBackgroundColour(self.colour)
        self.Bind(wx.EVT_BUTTON, self.register, self.register_Button)
        #人脸匹配按钮
        self.match_Button = wx.Button(self.left, -1, u'人脸匹配', pos=(40, 130), size=(100, 40))
        self.match_Button.SetBackgroundColour(self.colour)
        ###实时识别按钮
        self.recognition_Button = wx.Button(self.left, -1, u'实时识别', pos=(40, 210), size=(100, 40))
        self.recognition_Button.SetBackgroundColour(self.colour)
        self.Bind(wx.EVT_BUTTON, self.rt_recognition, self.recognition_Button)

        self.image_button = wx.StaticBitmap(self.middle, pos=self.interface_pos)

        ####UI线程接收Deal线程  处理后的数据
        pub.subscribe(self.show_deal_data, 'Deal_data')   ####显示处理后的数据

    ####注册界面
    def register(self, event):
        ####弹出界面
        #      frame_register = login(None, -1, model)
        #      frame_register.row_register()
        #      frame_register.Center()
        #      frame_register.Show(True)
        # ＃#直接在中间界面显示
        ##显示姓名
        font = wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, True)
        self.accountLabel = wx.StaticText(self.middle, -1, u'姓   名', pos=(180, 710), size=(100, 100))
        self.accountLabel.SetForegroundColour('white')
        self.accountLabel.SetFont(font)
        ##输入姓名文本框
        self.accountInput = wx.TextCtrl(self.middle, -1, u'', pos=(300, 700), size=(150, -1))
        self.accountInput.SetForegroundColour('gray')
        self.accountInput.SetFont(font)
        ###拍照
        self.take_Button = wx.Button(self.middle, -1, u'拍   照', pos=(180, 780), size=(100, 30))
        self.take_Button.SetForegroundColour('white')
        self.take_Button.SetBackgroundColour(self.colour)
        self.Bind(wx.EVT_BUTTON, self.takephoto, self.take_Button)
        ##确定
        self.sure_Button = wx.Button(self.middle, -1, u'确定', pos=(180, 850), size=(100, 30))
        self.sure_Button.SetForegroundColour('white')
        self.sure_Button.SetBackgroundColour(self.colour)
        self.Bind(wx.EVT_BUTTON, self.MakeSure, self.sure_Button)
        ###取消
        self.delay_Button = wx.Button(self.middle, -1, u'取消', pos=(350, 850), size=(100, 30))
        self.delay_Button.SetForegroundColour('white')
        self.delay_Button.SetBackgroundColour(self.colour)
        self.Bind(wx.EVT_BUTTON, self.destroy, self.delay_Button)
        ###从文件夹选择
        self.select_Button = wx.Button(self.middle, -1, u'从文件夹选择', pos=(350, 780), size=(100, 30))
        self.select_Button.SetForegroundColour('white')
        self.select_Button.SetBackgroundColour(self.colour)
        self.Bind(wx.EVT_BUTTON, self.select, self.select_Button)

        # self.image_button = wx.StaticBitmap(self.middle , pos = self.interface_pos)
        pub.subscribe(self.show_image, "register")     ##### 注册 接受拍照采集照片子线程的消息, 接受子线程传递的图片，并显示在桌面上


    def takephoto(self, event):   ###拍照按钮出发的事件， 采用多线程的方式，子线程采集图片，线程显示在界面上：
        #####1 界面上增加确定和取消按钮  2 重载一个线程类，重构run函数 3 开启线程
        try:
            self.remindLabel.Destroy()
        except:
            print()


        self.photo_sure = wx.Button(self.middle, -1, u'确  定', pos=(120, 600), size=(100, 30))
        self.photo_sure.SetForegroundColour('white')
        self.photo_sure.SetBackgroundColour(self.colour)
        self.Bind(wx.EVT_BUTTON, self.sure_photo, self.photo_sure)


        self.photo_cancel = wx.Button(self.middle, -1, u'取  消', pos=(580, 600), size=(100, 30))
        self.photo_cancel.SetForegroundColour('white')
        self.photo_cancel.SetBackgroundColour(self.colour)
        self.Bind(wx.EVT_BUTTON, self.cancel_photo, self.photo_cancel)


        self.thread = Register_Thread()
        self.thread.start()

    def show_image(self, msg):   #####UI 线程将采集到的图片显示在界面上

        if msg is not None:
            self.img_captured = cv2.resize(msg, (640, 640))
            image = cv2.resize(self.img_captured, (self.interface_size))
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            h, w, c  = image.shape
            pic = wx.Bitmap.FromBuffer(w, h, image)
            self.image_button.SetBitmap(pic)
            wx.CallAfter(pub.sendMessage, 'sure')
            self.thread.stop()



    def sure_photo(self, event):###拍照是确定按钮触发事件

        font = wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, True)
        h_row, w_row = self.img_captured.shape[:2]
        image = cv2.resize(self.img_captured, self.interface_size)
        w, h = self.interface_size[0], self.interface_size[1]

        aligned_face, bbox = None, None
        self.bbox, self.aligned_face = model.get_input(self.img_captured)
        if len(self.bbox) > 0:
            for i in range(len(self.bbox)):
                box = self.bbox[i]
                cv2.rectangle(image, (int(box[0] * w / w_row), int(box[1] * h / h_row)),
                                  (int(box[2] * w / w_row), int(box[3] * h / h_row)), (55, 255, 155), 2)
        else:
            self.remindLabel = wx.StaticText(self.middle, -1, u'没有检测到人脸', pos=(450, 700), size=(100, 100))
            self.remindLabel.SetFont(font)

        wxbmp = wx.BitmapFromBuffer(w, h, image)
        self.image_button.SetBitmap(wxbmp)



        self.photo_cancel.Destroy()
        self.photo_sure.Destroy()




    def cancel_photo(self, event):#####拍照取消按钮触发事件
        #### 1 向子线程发消息关闭摄像头  2 回复初始界面图片  3 关闭子线程   4 清除界面

        interface_img = wx.Image(load_image(self.interface_img), wx.BITMAP_TYPE_ANY).ConvertToBitmap()

        self.image_button.SetBitmap(interface_img)

        self.photo_sure.Destroy()
        self.photo_cancel.Destroy()
        try:
            self.remindLabel.Destroy()
        except:
            print()

        wx.CallAfter(pub.sendMessage,'cancel')
        self.thread.stop()

    def select(self, event):   ###用于从文件夹选择图片注册
        wildcard = 'All files(*.*)|*.*'
        dlg = wx.FileDialog(None, 'select', os.getcwd(), '', wildcard)
        #      dlg = wx.DirDialog(self,u"选择文件夹",style=wx.DD_DEFAULT_STYLE)
        if dlg.ShowModal() == wx.ID_OK:
            file = dlg.GetPath()
            self.img_captured = cv2.imread(file)
            self.img_captured = cv2.resize(self.img_captured, (640, 640))
            font = wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, True)
            h_row, w_row = self.img_captured.shape[:2]
            self.bbox, self.aligned_face = model.get_input(self.img_captured)
            image = cv2.resize(self.img_captured, self.interface_size)
            w, h = self.interface_size[0], self.interface_size[1]
            if len(self.bbox) > 0:
                for i in range(len(self.bbox)):
                    box = self.bbox[i]
                    cv2.rectangle(image, (int(box[0] * w / w_row), int(box[1] * h / h_row)),
                                  (int(box[2] * w / w_row), int(box[3] * h / h_row)), (55, 255, 155), 2)
            else:
                self.remindLabel = wx.StaticText(self.middle, -1, u'没有检测到人脸', pos=(450, 700), size=(100, 100))
                self.remindLabel.SetFont(font)
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            wxbmp = wx.BitmapFromBuffer(w, h, image)
            self.image_button.SetBitmap(wxbmp)

    def MakeSure(self, event):  ###１．账户名不重复，２　保存embedding  3跳转界面
        try:
            self.remindLabel.Destroy()
        except:
            print()
        try:
            self.accountInput.clear()
        except:
            print()

        exist = 0
        account = self.accountInput.GetValue()
        ###已经输入账户名  1 保存图片和特征  2 清除界面上的账户名  3 显示刚刚开始的界面图片
        font = wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, True)
        if len(account) > 0:
            if not os.path.exists(self.id_file):###如果保存姓名的文件不存在，新建
                os.mknod(self.id_file)
            fid = open(self.id_file, 'r')
            names = fid.readlines()
            fid.close()
            font = wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, True)
            # accountLabel = wx.StaticText(self.middle, -1, u'帐号已经存在', pos=(450, 700), size  = (100, 100))
            if names is not None:
                for name in names:
                    name = name.strip()
                    if name == account:###判断当前账户是否存在
                        exist = 1  ###当前用户名已经存在
            if exist == 0:###当前账户不存在， 写入账户文件
                fid = open(self.id_file, 'a')
                fid.write(account + '\n')
                fid.close()
            else:  ###账户存在, 界面显示提醒
                self.remindLabel = wx.StaticText(self.middle, -1, u'帐号已经存在', pos=(450, 700), size=(100, 100))
                self.remindLabel.SetFont(font)

        ###保存图片和特征
                self.save_id(self.img_captured, self.bbox, self.aligned_face, account, event)

            interface_img = wx.Image(load_image(self.interface_img), wx.BITMAP_TYPE_ANY).ConvertToBitmap()
            self.image_button.SetBitmap(interface_img)

        else:
            self.remindLabel = wx.StaticText(self.middle, -1, u'请输入姓名', pos=(450, 700), size=(100, 100))
            self.remindLabel.SetFont(font)



    def save_id(self, image_row, bbox, aligned_face, account, event):  ###确定按钮保留采集的ID和feature  以及照片用于后面的相似度显示

        ###如果检测到人脸 1 保存人脸图片 2 保存最大特征 3 界面恢复
        font = wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, True)
        if len(bbox) > 0:
            self.path_id = os.path.join(self.path, account)
            if not os.path.exists(self.path_id):
                os.makedirs(self.path_id)
            file = os.listdir(self.path_id)
            count = len(file)
            self.save_name = self.path_id + '/'  + str(count) + '.jpg'
            max_face= aligned_face[0]
            feature = model.get_feature(max_face)
            fid = open(self.id_embedding, 'a')
            # max_face = np.transpose(aligned_face[0], (1, 2, 0))  ###取最大的人脸
            cv2.imwrite(self.save_name, image_row)
            for emb in feature:
                fid.write(str(emb) + ' ')
            fid.write(account+ '_' + str(count))
            fid.write('\n')
            fid.close()
        else:
            self.remindLabel = wx.StaticText(self.middle, -1, u'没有检测到人脸', pos=(450, 700), size=(100, 100))
            self.remindLabel.SetFont(font)


    def destroy(self, event):
        try:
            self.accountInput.Clear()
        except:
            print()

        try:
            self.remindLabel.Destroy()
        except:
            print()

        interface_img = wx.Image(load_image(self.interface_img), wx.BITMAP_TYPE_ANY).ConvertToBitmap()
        self.image_button.SetBitmap(interface_img)

    def rt_recognition(self, event):

        try:
            self.accountLabel.Destroy()
        except:
            print()
        try:
            self.take_Button.Destroy()
        except:
            print()
        try:
            self.sure_Button.Destroy()
        except:
            print()
        try:
            self.delay_Button.Destroy()
        except:
            print()
        try:
            self.photo_sure.Destroy()
        except:
            print()
        try:
            self.photo_cancel.Destroy()
        except:
            print()
        try:
            self.select_Button.Destroy()
        except:
            print()
        try:
            self.accountInput.Destroy()
        except:
            print()
        try:
            self.remindLabel.Destroy()
        except:
            print()


        self.cancel_button = wx.Button(self.middle, -1, u'取  消', pos=(580, 600), size=(100, 30))
        self.cancel_button.SetForegroundColour('white')
        self.cancel_button.SetBackgroundColour(self.colour)
        self.Bind(wx.EVT_BUTTON, self.rt_cancel, self.cancel_button)


        self.receive_thread = Receive_Thread()   #####识别时摄像头采集的线程
        self.deal_thread = Deal_Thread()
        self.receive_thread.start()
        self.deal_thread.start()


####接收到摄像头采集线程传递回来的数据，将其传递给数据处理线程
    # def deal_data(self, msg):
    #     self.deal_thread = Deal_Thread(args = (msg,))
    #     self.deal_thread.start()

#####接收到数据处理线程传递回来的数据，显示在界面上

    def show_deal_data(self, msg):
        if msg is not None:
            image = msg[0]
            h, w, c  = image.shape
            pic = wx.Bitmap.FromBuffer(w, h, image)
            self.image_button.SetBitmap(pic)
            if len(msg) > 1:####检测到人脸
                max_face = msg[1]
                dis_maxface = msg[2]
                id_maxface = msg[3]
                # self.similar_pthotos(max_face, dis_maxface, id_maxface)
        self.deal_thread.stop()

    def rt_cancel(self, event):

        wx.CallAfter(pub.sendMessage,'camera_cancel')
        self.cancel_button.Destroy()
        interface_img = wx.Image(load_image(self.interface_img), wx.BITMAP_TYPE_ANY).ConvertToBitmap()
        self.image_button.SetBitmap(interface_img)
        self.receive_thread.stop()




    # def similar_pthotos(self, max_face, dis_maxface, id_maxface):
    #    ####列出与其最相似的三张图片
    #     cap_x, cap_y = 20, 200
    #     contrast_x, contrast_y = 170, 200
    #
    #
    #     dis_maxface = list(dis_maxface)
    #     id_maxface = list(id_maxface)
    #
    #     max_face = cv2.cvtColor(max_face, cv2.COLOR_BGR2RGB)
    #     for i in range(self.target_num):
    #         target_dis = np.argmin(dis_maxface)
    #         target_id = id_maxface[target_dis]
    #
    #         dis_maxface.pop(target_dis)
    #         id_maxface.pop(target_dis)
    #
    #         ###读取图片
    #         target_id = target_id.split('_')
    #         name, img_index  = target_id[0], target_id[1]
    #         img_name = os.path.join(self.path, name) + '/' + str(img_index) + '.jpg'
    #         image = cv2.imread(img_name)
    #         max_face = cv2.resize(max_face, (100, 100))
    #         image = cv2.resize(image, (100, 100))
    #
    #         img_cap = wx.StaticBitmap(self.middle_right, pos=(cap_x, cap_y))
    #         img_contrast = wx.StaticBitmap(self.middle_right, pos=(contrast_x, contrast_y))
    #         image_bmp = wx.BitmapFromBuffer(100, 100, image)
    #         maxface_bmp = wx.BitmapFromBuffer(100, 100, max_face)
    #         img_contrast.SetBitmap(image_bmp)
    #         img_cap.SetBitmap(maxface_bmp)
    #         cap_y += 150
    #         contrast_y += 150





class Register_Thread(threading.Thread):
    """Test Worker Thread Class."""

    # ----------------------------------------------------------------------
    def __init__(self):
        """Init Worker Thread Class."""
        threading.Thread.__init__(self)
        self.timetoQuit = threading.Event()  ###创建一个日志管理标志， event默认为False
        self.timetoQuit.clear()   ###event标志为False, 调用wait所有的线程被阻塞
        self.rtsp = 'rtsp://admin:ab123456@10.14.205.100/Streaming/Channels/101'
        self.target_length = 10

    # ----------------------------------------------------------------------
    def run(self):

        stack = []
        self.cap = cv2.VideoCapture(self.rtsp)
        self.cap.set(cv2.CAP_PROP_FPS, 40)
        while(self.cap.isOpened()):
            _, im_rd = self.cap.read()
            ###栈溢出
            if len(stack) > self.target_length:
                del stack[:]
            if _:
                stack.append(im_rd)
            wx.CallAfter(pub.sendMessage, "register", msg = stack.pop())
            pub.subscribe(self.sure, "sure")
            pub.subscribe(self.cancel, "cancel")




    def stop(self):
        self.timetoQuit.set()##event 为True, 调用wait的所有线程被唤醒
        self.timetoQuit.clear()

    def sure(self):
        try:
            self.cap.release()
        except:
            print()

    def cancel(self):
        try:
            self.cap.release()
        except:
            print()


####实时识别人脸 开两个线程，一个用于opencv读取图片，一个用于处理数据

class Receive_Thread(threading.Thread):


    def __init__(self):
        """Init Worker Thread Class."""
        threading.Thread.__init__(self)
        self.timetoQuit = threading.Event()  ###创建一个日志管理标志， event默认为False
        self.timetoQuit.clear()   ###event标志为False, 调用wait所有的线程被阻塞
        self.rtsp = 'rtsp://admin:ab123456@10.14.205.100/Streaming/Channels/101/ch1-s1?tcp'

    def run(self):

        ###打开摄像头

        self.cap = cv2.VideoCapture(0)
        self.cap.set(cv2.CAP_PROP_FPS, 15)

        while (self.cap.isOpened()):

            _, im_rd = self.cap.read()

            ###将采集到的图片发送给UI线程
            q.put(im_rd)
            pub.subscribe(self.cancel, "camera_cancel")



    def stop(self):
        self.timetoQuit.set()##event 为True, 调用wait的所有线程被唤醒
        self.timetoQuit.clear()


    def cancel(self):
        try:
            self.cap.release()
        except:
            print()


class Deal_Thread(threading.Thread):
    def __init__(self):
        """Init Worker Thread Class."""
        threading.Thread.__init__(self)
        self.timetoQuit = threading.Event()  ###创建一个日志管理标志， event默认为False
        self.timetoQuit.clear()   ###event标志为False, 调用wait所有的线程被阻塞

        self.interface_size = (600,  480)
        self.id_embedding = 'id_embedding.txt'


    def run(self):
        time1 = time.time()
        self.load_data()
        feature_all = np.array(list(self.embedding.values()))
        id = list(self.embedding.keys())
        font = ImageFont.truetype('NotoSansCJK-Black.ttc', 20, encoding="utf-8")
        w, h = self.interface_size[0], self.interface_size[1]
        time2 = time.time()
        print(time2 - time1)


        while True:
            # lock = threading.Lock()
            # lock.acquire()
            if q.empty() != True:

                im_rd = cv2.resize(q.get(), (640, 640))
                image = cv2.resize(im_rd, self.interface_size)
                bbox, aligned_face = model.get_input(im_rd)

                img_PIL = Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
                draw = ImageDraw.Draw(img_PIL)

                for i in range(len(bbox)):
                    #
                    name = 'unknown'
                    face = aligned_face[i]
                    feature = model.get_feature(face)
                    dis_list = np.mean(np.square(np.subtract(feature, feature_all)), axis=1)

                    min_dis = np.argmin(dis_list)
                    if dis_list[min_dis] < 0.0025:
                        name = id[min_dis]
                        name = name.split('_')[0]
                    box = bbox[i]
                    draw.rectangle((int(box[0]) * w / 640, int(box[1]) * h / 640, int(box[2]) * w / 640,
                                    int(box[3]) * h / 640), None,
                                   (0, 0, 255), 2)
                    draw.text((int(box[0]) * w / 640, int(box[1] - 10) * h / 640), name, (55, 255, 155), font=font)
                    if i == 0:
                        max_face = im_rd[int(box[1]):int(box[3]), int(box[0]):int(box[2])]
                        dis_maxface = dis_list
                        id_maxface = id
                image_change = np.asarray(img_PIL)
                #
                # ###########发送处理好的数据给UI线程
                if len(aligned_face) > 0:  ####画面中出现人脸
                    wx.CallAfter(pub.sendMessage, "Deal_data", msg=[image_change, max_face, dis_maxface, id_maxface])
                else:
                    wx.CallAfter(pub.sendMessage, "Deal_data", msg=[image_change])


    # @jit
    def load_data(self):
        fid = open(self.id_embedding, 'r')
        contexts = fid.readlines()

        fid.close()
        self.embedding = {}
        for i in range(len(contexts)):
            context = contexts[i].strip()
            context = context.split(' ')
            name = context.pop(-1)
            self.embedding[name] = list(map(float, context))


#     def recognition(self, img):
#         fid = open(self.id_embedding, 'r')
#         embeddings = fid.readlines()
#         fid.close()
#
# #
#         feature_all = np.zeros(shape = (len(embeddings), 512))
#         id = []
# #
#         for i in range(len(embeddings)):
#             emb = embeddings[i].strip()
#             emb = emb.split(' ')
#             id.append(emb.pop(-1))
#             feature_all[i] = list(map(float, emb))
# #
#         font = ImageFont.truetype('NotoSansCJK-Black.ttc', 20, encoding="utf-8")
# #
#         w, h = self.interface_size[0], self.interface_size[1]
# #
#         im_rd = cv2.resize(img, (640, 640))
#         h_row, w_row = im_rd.shape[:2]
#         image = cv2.resize(im_rd, self.interface_size)
# #             # try:
#
#         time1 = time.time()
#         bbox, aligned_face = model.get_input(im_rd)
#         img_PIL = Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
#         draw = ImageDraw.Draw(img_PIL)
#         for i in range(len(bbox)):
# #
#             name = 'unknown'
#             face = aligned_face[i]
#             feature = model.get_feature(face)
#             dis_list = np.mean(np.square(np.subtract(feature, feature_all)), axis=1)
#             min_dis = np.argmin(dis_list)
#             if dis_list[min_dis] < 0.01:
#                 name = id[min_dis]
#                 name = name.split('_')[0]
#             box =  bbox[i]
#             draw.rectangle((int(box[0]) * w / w_row, int(box[1])* h / h_row, int(box[2])* w / w_row, int(box[3])* h / h_row), None,
#                                                    (0, 0, 255), 2)
#             draw.text((int(box[0])* w / w_row, int(box[1] - 10)* h / h_row), name, (55, 255, 155), font=font)
#             if i == 0:
#                 max_face = im_rd[int(box[1]):int(box[3]), int(box[0]):int(box[2])]
#                 dis_maxface = dis_list
#                 id_maxface = id
#         image_change = np.asarray(img_PIL)
# #
# # ###########发送处理好的数据给UI线程
#         if len(aligned_face) > 0:####画面中出现人脸
#             wx.CallAfter(pub.sendMessage, "Deal_data", msg=[image_change, max_face, dis_maxface, id_maxface])
#         else:
#             wx.CallAfter(pub.sendMessage, "Deal_data",msg=[image_change])


    def stop(self):
        self.timetoQuit.set()##event 为True, 调用wait的所有线程被唤醒
        self.timetoQuit.clear()






class App(wx.App):
    def __init__(self, redirect=True, filename=None):
        wx.App.__init__(self, redirect, filename)
        global model, q
        model = self.load_model()
        q = queue.Queue(maxsize=5)

    def load_model(self):
        parser = argparse.ArgumentParser(description='face model test')
        # general
        parser.add_argument('--model_path', default='../RetinaFace/mnet.25/mnet.25',
                            help='model_path for face detection')
        parser.add_argument('--model', default=00, type=int,
                            help='model.')
        parser.add_argument('--gpuid', default=0, type=int, help='gpu id')
        parser.add_argument('--net', default='net3',
                            help='net')

        parser.add_argument('--model_recog', default='../recognition/model/y2-arcface-retina/model,01',
                            help='path to load model for face recognition.')
        args = parser.parse_args()
        return retinaface_model.FaceModel(args)

    def InitUI(self):
        Frame = interface(parent=None, id=-1)

        Frame.Show()


if __name__ == '__main__':
    App = App()
    App.InitUI()
    App.MainLoop()




